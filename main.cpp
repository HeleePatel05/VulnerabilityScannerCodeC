#include <iostream>#include <fstream>#include <vector>#include <algorithm>#include "SafeLib.h"using namespace std;int main(){    string instruction;    vector<string> vulnerableList;    vector<string> vulnerableListAlternative;    ifstream myFile;    size_t memsetSize;    memsetSize = 0;        vector<string> pointers;    vulnerableList.push_back("strcpy");    vulnerableList.push_back("strcat");    vulnerableList.push_back("gets");    vulnerableList.push_back("scanf");    vulnerableList.push_back("printf");    vulnerableList.push_back("syslog");    vulnerableList.push_back("access");    vulnerableList.push_back("chown");    vulnerableList.push_back("chmod");    vulnerableList.push_back("tmpnam");    vulnerableList.push_back("system");    vulnerableList.push_back("random");    vulnerableList.push_back("memset");    vulnerableList.push_back("length()");    vulnerableListAlternative.push_back("strcpy_s");    vulnerableListAlternative.push_back("strncat");    vulnerableListAlternative.push_back("fgets");    vulnerableListAlternative.push_back("scanf_s");    vulnerableListAlternative.push_back("fprintf or snprintf");    vulnerableListAlternative.push_back("closelog to closes the current Syslog connection");    vulnerableListAlternative.push_back("chdir");    vulnerableListAlternative.push_back("setgid or setuid");    vulnerableListAlternative.push_back("passing the command to the loader directly");    vulnerableListAlternative.push_back("chdir to any other directory before calling tmpnam");    vulnerableListAlternative.push_back("execv, execve, execl");    vulnerableListAlternative.push_back("BCryptGenRandom()");    vulnerableListAlternative.push_back("memset_s");    vulnerableListAlternative.push_back("variable holder");    myFile.open ("code.c");    int line=1;bool lengthCH=false;    do    {        getline(myFile,instruction);        for(int i=0; i< vulnerableList.size(); i++)        { if(instruction.find(vulnerableList[13]) != 2 ) {                if (instruction.find(vulnerableList[i]) == 0 && instruction.find("memset_s") != 0) {                    if (instruction.find("memset") == 0 && instruction.find("memset_s") != 0) {                        memsetSize = std::count(instruction.begin(), instruction.end(), ',');                        if (memsetSize < 3 && instruction.find("memset_s") != 0) {                            cout << "Vulnerability detected in line " << line                                 << ", as the 'memset' is not used in a compliant way in " << instruction << endl;                            cout << "Consider replacing '" << vulnerableList[i] << "' with '"                                 << vulnerableListAlternative[i]                                 << "' to solve this Vulnerability and call 'memset_s' before the destruction of the buffer."                                 << endl << endl;                        }                        memsetSize = 0;                    } else {                        cout << "Vulnerability detected in line " << line << ", as it includes " << vulnerableList[i]                             << " in the instruction " << instruction << endl;                        cout << "Consider replacing " << vulnerableList[i] << " with '" << vulnerableListAlternative[i]                             << "' to solve this Vulnerability" << endl << endl;                        lengthCH=true;                    }                    if (instruction.find(vulnerableList[4]) == 0 && instruction.find("sizeof") == -1)                        cout << "Consider adding (sizeof) for the printed string when using " << vulnerableList[4]                             << endl << endl;                }            }            else if (lengthCH== false){                cout << "Vulnerability detected in line " << line << ", as it includes " << vulnerableList[13]                     << " in the instruction " << instruction << endl;                cout << "Consider replacing " << vulnerableList[13] << " with a '"                     << vulnerableListAlternative[13]                     << "' to check if the returned value is greater than 0" << endl << endl;                lengthCH=true;            }        }        //cout << endl;        line++;    }while(instruction!="return 0;");    myFile.close();    return 0;}