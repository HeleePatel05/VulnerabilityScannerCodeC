/* * Name: Mohammad Walid Charrwi * ID#: 218122250 * Subject: Computer and Network Security * Project: C_Scanner_Project */#include <iostream>#include <fstream>#include <vector>#include <algorithm>#include <cstddef>#include <sstream>#include <set>#include "SafeLib.h" //safe implementation of vulnerable function callsusing namespace std;static const std::set<std::string> call_func_white_list = {        "_open", "_wopen", "access", "adjtime", "asctime_r", "asprintf", "chdir", "chmod", "chown"        , "creat", "ctime_r", "execl", "execle", "execlp", "execv", "execve", "fchmod", "fcntl"        , "fdatasync", "fclose", "flock", "fmemopen", "fnmatch", "fopen", "fopencookie", "for", "free"        , "freopen", "fseeko", "fstat", "fsync", "ftello", "ftruncate", "getgrnam", "gethostbyaddr", "gethostbyname"        , "getnetbyname", "getopt", "getopt_long", "getprotobyname", "getpwnam", "getservbyname", "getservbyport"        , "glob", "gmtime", "gmtime_r", "if", "index", "inet_addr", "inet_aton", "inet_network", "initgroups"        , "ioctl", "link", "localtime_r", "lockf", "lseek", "lstat", "mkdir", "mkfifo", "mknod", "mkstemp"        , "obstack_printf", "obstack_vprintf", "open", "opendir", "parse_printf_format", "pathconf"        , "perror", "popen", "posix_fadvise", "posix_fallocate", "pread", "psignal", "pwrite", "read", "readahead"        , "readdir", "readdir_r", "readlink", "readv", "realloc", "regcomp", "return", "rewinddir", "rindex"        , "rmdir", "scandir", "seekdir", "setbuffer", "sethostname", "setlinebuf", "sizeof", "strdup"        , "stat", "stpcpy", "strcasecmp", "stricmp", "strncasecmp", "switch"        , "symlink", "sync_file_range", "telldir", "tempnam", "time", "typeid", "unlink"        , "utime", "utimes", "vasprintf", "while", "wordexp", "write", "writev"}; //white temp list function callsint countFreq(string &pat, string &txt) /* Extends "SafeLib.h"*/{    int M = pat.length();    int N = txt.length();    int res = 0;    /* A loop to slide pat[] one by one */    for (int i = 0; i <= N - M; i++)    {        /* For current index i, check for           pattern match */        int j;        for (j = 0; j < M; j++)            if (txt[i+j] != pat[j])                break;        // if pat[0...M-1] = txt[i, i+1, ...i+M-1]        if (j == M)        {            res++;            j = 0;        }    }    return res;}int extractIntegerWords(string str){    stringstream ss;    /* Storing the whole string into string stream */    ss << str;    /* Running loop till the end of the stream */    string temp;    int found;    while (!ss.eof()) {        /* extracting word by word from stream */        ss >> temp;        /* Checking the given word is integer or not */        if (stringstream(temp) >> found)            return found;        /* To save from space at the end of string */        temp = "";    }}int main(){    string instruction;    vector<string> vulnerableList;    vector<string> vulnerableListAlternative;    ifstream myFile;    size_t memsetSize;    memsetSize = 0;    string pointerList[6]= {"string *","int *", "char *", "bool*", "float *", "double *"};    vector<string> pointerFound;    vulnerableList.push_back("strcpy");    vulnerableList.push_back("strcat");    vulnerableList.push_back("gets");    vulnerableList.push_back("scanf");    vulnerableList.push_back("printf");    vulnerableList.push_back("syslog");    vulnerableList.push_back("access");    vulnerableList.push_back("chown");    vulnerableList.push_back("chmod");    vulnerableList.push_back("tmpnam");    vulnerableList.push_back("system");    vulnerableList.push_back("random");    vulnerableList.push_back("memset");    vulnerableList.push_back("length()");    vulnerableListAlternative.push_back("strcpy_s");    vulnerableListAlternative.push_back("strncat");    vulnerableListAlternative.push_back("fgets");    vulnerableListAlternative.push_back("scanf_s");    vulnerableListAlternative.push_back("fprintf or snprintf");    vulnerableListAlternative.push_back("closelog to closes the current Syslog connection");    vulnerableListAlternative.push_back("chdir");    vulnerableListAlternative.push_back("setgid or setuid");    vulnerableListAlternative.push_back("passing the command to the loader directly");    vulnerableListAlternative.push_back("chdir to any other directory before calling tmpnam");    vulnerableListAlternative.push_back("execv, execve, execl");    vulnerableListAlternative.push_back("BCryptGenRandom()");    vulnerableListAlternative.push_back("memset_s");    vulnerableListAlternative.push_back("variable holder");    myFile.open ("code.c");    int line=1;    int NumPointers=0;    bool fileOpen=false;    string fileName="";    int bufferSize=300;    bool lengthCH=false;    cout<< endl;    cout<< "C scanner started. Scanning 'code.c'..." << endl <<endl;    do    {        getline(myFile,instruction);        NumPointers=0;        if(instruction.find("//")==0 || instruction.find("/*")==0)        {            line++;            continue;        }        if(instruction.find("#include")!=-1 && instruction.find(".h")!=-1)        {            cout<< "Foreign imported library with the name '" << instruction.substr((instruction.find('"')+1),(instruction.find(".")+1)-(instruction.find('"'))) << "' included in line " << line << " in the 'code.c' program. Scan the imported Library for suspected vulnerabilities" << endl << endl;            line++;            continue;        }        if(instruction.find("fopen")!=-1)        {            fileOpen=true;            fileName = instruction.substr((instruction.find('"')+1),(instruction.find(",")-3)-(instruction.find("(")));        }        if(instruction.find("fclose")!=-1)        {            fileOpen=false;        }        if(instruction.find("fread")!=-1)        {            if(extractIntegerWords(instruction)<= bufferSize)            {                cout << "Buffer Overflow Vulnerability suspected in instruction " << line << endl;                cout<< "Change the buffer character to value greater than " << bufferSize <<" to avoid a buffer overflow vulnerability..." << endl << endl;            }        }        for(int j=0; j<pointerList->size(); j++)        {            if(instruction.find(pointerList[j])!=-1)            {                NumPointers= countFreq(pointerList[j], instruction);                //pointerFound.push_back(instruction);                for(int x=0; x<NumPointers; x++)                {                    pointerFound.push_back(instruction);            }            }        }        //cout<< pointerFound.size() << endl;        if(pointerFound.empty() == false)        {            if(instruction.find("free")!=-1)            {                pointerFound.pop_back();                //cout << "size" << pointerFound.size() << endl;            }        }        for(int i=0; i< vulnerableList.size(); i++)        {            if(instruction.find(vulnerableList[13]) != 2 ) {                if (instruction.find(vulnerableList[i]) == 0 && instruction.find("memset_s") != 0) {                    if (instruction.find("memset") == 0 && instruction.find("memset_s") != 0) {                        memsetSize = std::count(instruction.begin(), instruction.end(), ',');                        if (memsetSize < 3 && instruction.find("memset_s") != 0) {                            cout << "Vulnerability detected in line " << line                                 << ", as the 'memset' is not used in a compliant way in " << instruction << endl;                            cout << "Consider replacing '" << vulnerableList[i] << "' with '"                                 << vulnerableListAlternative[i]                                 << "' to solve this Vulnerability and call 'memset_s' before the destruction of the buffer."                                 << endl << endl;                        }                        memsetSize = 0;                    } else {                        cout << "Vulnerability detected in line " << line << ", as it includes " << vulnerableList[i]                             << " in the instruction " << instruction << endl;                        cout << "Consider replacing " << vulnerableList[i] << " with '" << vulnerableListAlternative[i]                             << "' to solve this Vulnerability" << endl << endl;                        lengthCH=true;                    }                    if (instruction.find(vulnerableList[4]) == 0 && instruction.find("sizeof") == -1)                        cout << "Consider adding (sizeof) for the printed string when using " << vulnerableList[4]                             << endl << endl;                }            }            else if (lengthCH== false){                cout << "Vulnerability detected in line " << line << ", as it includes " << vulnerableList[13]                     << " in the instruction " << instruction << endl;                cout << "Consider assigning " << vulnerableList[13] << " to a '"                     << vulnerableListAlternative[13]                     << "' to check if the returned value is greater than 0" << endl << endl;                lengthCH=true;            }        }        line++;    }while(instruction!="return 0;");    if(pointerFound.empty() == false)    cout<< "DANGLING Pointers have been detected... There are " << pointerFound.size() << " pointer(s) that are not freed." << endl << endl;    if(fileOpen==true)    {        cout<< "The file '" << fileName <<"' that was opened in code.c was not closed!" << endl  << endl;        cout<< "Close the file '" << fileName <<"' using the command: fclose(" << fileName <<"); " <<endl << endl;    }    myFile.close();    cout<< endl << "C scanner finished. Scanning 'code.c' completed..." << endl <<endl;    return 0;}