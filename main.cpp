#include <iostream>#include <fstream>#include <vector>using namespace std;int main(){    string instruction;    vector<string> vulnerableList;    vector<string> vulnerableListAlternative;    ifstream myFile;    vulnerableList.push_back("strcpy");    vulnerableList.push_back("strcat");    vulnerableList.push_back("gets");    vulnerableList.push_back("scanf");    vulnerableList.push_back("printf");    vulnerableList.push_back("syslog");    vulnerableList.push_back("access");    vulnerableList.push_back("chown");    vulnerableList.push_back("chmod");    vulnerableList.push_back("tmpnam");    vulnerableList.push_back("system");    vulnerableList.push_back("random");    vulnerableListAlternative.push_back("strcpy_s");    vulnerableListAlternative.push_back("strncat");    vulnerableListAlternative.push_back("fgets");    vulnerableListAlternative.push_back("scanf_s");    vulnerableListAlternative.push_back("fprintf or snprintf");    vulnerableListAlternative.push_back("closelog to closes the current Syslog connection");    vulnerableListAlternative.push_back("chdir");    vulnerableListAlternative.push_back("setgid or setuid");    vulnerableListAlternative.push_back("passing the command to the loader directly");    vulnerableListAlternative.push_back("chdir to any other directory before calling tmpnam");    vulnerableListAlternative.push_back("execv, execve, execl");    vulnerableList.push_back("BCryptGenRandom()");    myFile.open ("code.c");    int line=1;    //getline(myFile,instruction);    //cout<< instruction.find(vulnerableList[0]) << endl;    //cout << instruction << endl;    do    {        getline(myFile,instruction);        for(int i=0; i< vulnerableList.size(); i++)        {            if(instruction.find(vulnerableList[i]) == 0)            {                cout<< instruction << endl;                cout << "Vulnerability detected in line " << line << ", as it includes " << vulnerableList[i] << endl;                cout << "Consider replacing " << vulnerableList[i] << " with '" << vulnerableListAlternative[i] << "' to solve this Vulnerability" << endl << endl;            }        }        line++;    }while(instruction!="return 0;");    myFile.close();    return 0;}