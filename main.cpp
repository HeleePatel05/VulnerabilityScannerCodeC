#include <iostream>#include <fstream>#include <vector>#include <algorithm>using namespace std;int main(){    string instruction;    vector<string> vulnerableList;    vector<string> vulnerableListAlternative;    ifstream myFile;    size_t memsetSize;    memsetSize = 0;    vulnerableList.push_back("strcpy");    vulnerableList.push_back("strcat");    vulnerableList.push_back("gets");    vulnerableList.push_back("scanf");    vulnerableList.push_back("printf");    vulnerableList.push_back("syslog");    vulnerableList.push_back("access");    vulnerableList.push_back("chown");    vulnerableList.push_back("chmod");    vulnerableList.push_back("tmpnam");    vulnerableList.push_back("system");    vulnerableList.push_back("random");    vulnerableList.push_back("memset");    vulnerableListAlternative.push_back("strcpy_s");    vulnerableListAlternative.push_back("strncat");    vulnerableListAlternative.push_back("fgets");    vulnerableListAlternative.push_back("scanf_s");    vulnerableListAlternative.push_back("fprintf or snprintf");    vulnerableListAlternative.push_back("closelog to closes the current Syslog connection");    vulnerableListAlternative.push_back("chdir");    vulnerableListAlternative.push_back("setgid or setuid");    vulnerableListAlternative.push_back("passing the command to the loader directly");    vulnerableListAlternative.push_back("chdir to any other directory before calling tmpnam");    vulnerableListAlternative.push_back("execv, execve, execl");    vulnerableListAlternative.push_back("BCryptGenRandom()");    vulnerableListAlternative.push_back("memset_s");    myFile.open ("code.c");    int line=1;    //getline(myFile,instruction);    //cout<< instruction.find(vulnerableList[0]) << endl;    //cout << instruction << endl;    do    {        getline(myFile,instruction);        for(int i=0; i< vulnerableList.size(); i++)        {            if(instruction.find(vulnerableList[i]) == 0 && instruction.find("memset_s")!= 0)            {                if(instruction.find("memset") == 0 && instruction.find("memset_s")!= 0)                {                    memsetSize = std::count(instruction.begin(), instruction.end(), ',');                    if (memsetSize < 3 && instruction.find("memset_s")!= 0) {                        cout << "Vulnerability detected in line " << line << ", as the 'memset' is not used in a compliant way in " << instruction << endl ;                        cout<< "Consider replacing '" << vulnerableList[i] << "' with '" << vulnerableListAlternative[i] << "' to solve this Vulnerability and call 'memset_s' before the destruction of the buffer." << endl << endl;                    }                    memsetSize=0;                }                else                {                    cout << "Vulnerability detected in line " << line << ", as it includes " << vulnerableList[i]                         << " in the instruction " << instruction << endl;                    cout << "Consider replacing " << vulnerableList[i] << " with '" << vulnerableListAlternative[i]                         << "' to solve this Vulnerability" << endl << endl;                }                if(instruction.find(vulnerableList[4]) == 0 && instruction.find("sizeof")== -1)                    cout << "Consider adding (sizeof) for the printed string when using " << vulnerableList[4] << endl;            }        }        //cout << endl;        line++;    }while(instruction!="return 0;");    myFile.close();    return 0;}